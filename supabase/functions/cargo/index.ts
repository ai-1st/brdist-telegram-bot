import { serve } from "https://deno.land/std/http/server.ts";
import { createAmazonBedrock } from 'https://esm.sh/@ai-sdk/amazon-bedrock';
import { generateObject, smoothStream, streamText } from 'https://esm.sh/ai@4.2.6';
import { z } from 'https://esm.sh/zod';

// Schema for cargo dimensions
const cargoDimensionsSchema = z.object({
  width: z.number().describe('–®–∏—Ä–∏–Ω–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö'),
  length: z.number().describe('–î–ª–∏–Ω–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö'), 
  depth: z.number().describe('–í—ã—Å–æ—Ç–∞/–≥–ª—É–±–∏–Ω–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö'),
  weight: z.number().describe('–í–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö'),
  description: z.string().describe('–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞'),
  items: z.array(z.object({
    name: z.string().describe('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞'),
    quantity: z.number().describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
    estimatedWeight: z.number().describe('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∫–≥')
  })).optional().describe('–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏')
});

// System prompt for the cargo bot
const SYSTEM_PROMPT = `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≥—Ä—É–∑–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
2. –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–∞–∑–º–µ—Ä—ã (—à–∏—Ä–∏–Ω–∞, –¥–ª–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –∏ –≤–µ—Å –≥—Ä—É–∑–∞
3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: max(—à–∏—Ä–∏–Ω–∞ * –¥–ª–∏–Ω–∞ * –≤—ã—Å–æ—Ç–∞ * 1000, –≤–µ—Å)
4. –û–±—â–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
5. –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—á–∏—Ç—ã–≤–∞–π:
- –ò—Å–ø–æ–ª—å–∑—É–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏)
- –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ–∂–Ω–æ, –¥–∞–π –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
- –£—á–∏—Ç—ã–≤–∞–π —Ç–∏–ø –≥—Ä—É–∑–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤–µ—Å–∞
- –ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —É—á—Ç–∏ –∏—Ö –≤—Å–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤:
- –°–Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏, —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
- –ó–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤–µ—Å–∞
- –†–∞—Å—Å—á–∏—Ç–∞–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
- –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø–∞–∫–æ–≤–∫–µ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)

–ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- TG_IMAGE url; caption - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- TG_CONCLUSION —Ç–µ–∫—Å—Ç; –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ1; –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ2; –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ3 - –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏

–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.`;

// Initialize Claude model
function getModel() {
  const bedrock = createAmazonBedrock({
    region: Deno.env.get('AWS_REGION'),
    accessKeyId: Deno.env.get('AWS_ACCESS_KEY_ID'),
    secretAccessKey: Deno.env.get('AWS_SECRET_ACCESS_KEY')
  });
  return bedrock("us.anthropic.claude-3-7-sonnet-20250219-v1:0");
}

// Send message to Telegram
async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  const botToken = Deno.env.get("CARGO_BOT_API_TOKEN");
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  const body: any = {
    chat_id: chatId,
    text: text,
    parse_mode: "HTML"
  };
  
  if (replyMarkup) {
    body.reply_markup = replyMarkup;
  }
  
  try {
    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    });
    
    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error(`Error sending message: ${error}`);
    return false;
  }
}

// Send photo to Telegram
async function sendTelegramPhoto(chatId: number, photoUrl: string, caption?: string) {
  const botToken = Deno.env.get("CARGO_BOT_API_TOKEN");
  const url = `https://api.telegram.org/bot${botToken}/sendPhoto`;
  
  const body: any = {
    chat_id: chatId,
    photo: photoUrl,
    parse_mode: "HTML"
  };
  
  if (caption) {
    body.caption = caption;
  }
  
  try {
    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    });
    
    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error(`Error sending photo: ${error}`);
    return false;
  }
}

// Send chat action (typing indicator)
function sendChatAction(chatId: number, action: string) {
  const botToken = Deno.env.get("CARGO_BOT_API_TOKEN");
  const url = `https://api.telegram.org/bot${botToken}/sendChatAction`;
  
  fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      action: action
    })
  }).catch(error => console.error(`Error sending chat action: ${error}`));
}

// Handle /start command
async function handleStartCommand(message: any) {
  const welcomeMessage = `üöö <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cargo Bot!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≥—Ä—É–∑–∞.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –≥—Ä—É–∑–∞
2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—é —Ä–∞–∑–º–µ—Ä—ã
3. –†–∞—Å—Å—á–∏—Ç–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏

<b>–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞:</b>
–°—Ç–æ–∏–º–æ—Å—Ç—å = max(–® √ó –î √ó –í √ó 1000, –í–µ—Å)

–≥–¥–µ:
‚Ä¢ –® - —à–∏—Ä–∏–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö
‚Ä¢ –î - –¥–ª–∏–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö  
‚Ä¢ –í - –≤—ã—Å–æ—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö
‚Ä¢ –í–µ—Å - –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥—Ä—É–∑–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞!`;

  await sendTelegramMessage(message.chat.id, welcomeMessage);
}

// Handle text messages
async function handleTextMessage(message: any) {
  await sendTelegramMessage(
    message.chat.id,
    "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
  );
}

// Handle image messages
async function handleImageMessage(message: any) {
  const chatId = message.chat.id;
  const userId = message.from.id;
  
  console.log(`[handleImageMessage] Processing image from user ${userId}`);
  
  try {
    // Send initial acknowledgment
    await sendTelegramMessage(chatId, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
    sendChatAction(chatId, "typing");
    
    // Get the largest photo
    const photoArray = message.photo;
    const largestPhoto = photoArray[photoArray.length - 1];
    const fileId = largestPhoto.file_id;
    
    // Get file info from Telegram
    const botToken = Deno.env.get("CARGO_BOT_API_TOKEN");
    const fileInfoResponse = await fetch(`https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`);
    const fileInfo = await fileInfoResponse.json();
    
    if (!fileInfo.ok || !fileInfo.result) {
      throw new Error("Failed to get file info from Telegram");
    }
    
    // Get the file URL
    const filePath = fileInfo.result.file_path;
    const fileUrl = `https://api.telegram.org/file/bot${botToken}/${filePath}`;
    
    // Analyze image with Claude to extract dimensions
    const dimensionAnalysis = await generateObject({
      model: getModel(),
      schema: cargoDimensionsSchema,
      messages: [
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤–µ—Å–∞ –≥—Ä—É–∑–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –º–µ—Ç—Ä–∞—Ö –∏ –≤–µ—Å–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö."
        },
        {
          role: "user",
          content: [
            {
              type: "text",
              text: message.caption || "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –≥—Ä—É–∑ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä—ã –∏ –≤–µ—Å."
            },
            {
              type: "image",
              image: new URL(fileUrl)
            }
          ]
        }
      ]
    });
    
    const dimensions = dimensionAnalysis.object;
    
    // Calculate shipping cost
    const volumeCost = dimensions.width * dimensions.length * dimensions.depth * 1000;
    const weightCost = dimensions.weight;
    const shippingCost = Math.max(volumeCost, weightCost);
    
    // Format the response
    const responseText = `üì¶ <b>–ê–Ω–∞–ª–∏–∑ –≥—Ä—É–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${dimensions.description}

<b>–ì–∞–±–∞—Ä–∏—Ç—ã:</b>
‚Ä¢ –®–∏—Ä–∏–Ω–∞: ${dimensions.width.toFixed(2)} –º
‚Ä¢ –î–ª–∏–Ω–∞: ${dimensions.length.toFixed(2)} –º
‚Ä¢ –í—ã—Å–æ—Ç–∞: ${dimensions.depth.toFixed(2)} –º
‚Ä¢ –û–±—ä–µ–º: ${(dimensions.width * dimensions.length * dimensions.depth).toFixed(3)} –º¬≥

<b>–í–µ—Å:</b> ${dimensions.weight.toFixed(1)} –∫–≥

<b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ –æ–±—ä–µ–º—É: ${dimensions.width.toFixed(2)} √ó ${dimensions.length.toFixed(2)} √ó ${dimensions.depth.toFixed(2)} √ó 1000 = ${volumeCost.toFixed(0)} ‚ÇΩ
‚Ä¢ –ü–æ –≤–µ—Å—É: ${dimensions.weight.toFixed(1)} –∫–≥ = ${weightCost.toFixed(0)} ‚ÇΩ

üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${shippingCost.toFixed(0)} ‚ÇΩ</b>`;

    await sendTelegramMessage(chatId, responseText);
    
    // Add item details if available
    if (dimensions.items && dimensions.items.length > 0) {
      let itemsText = "\n<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>\n";
      dimensions.items.forEach(item => {
        itemsText += `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. (~${item.estimatedWeight} –∫–≥/—à—Ç.)\n`;
      });
      await sendTelegramMessage(chatId, itemsText);
    }
    
    // Send conclusion with suggestions
    const suggestions = [
      "üì∏ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –≥—Ä—É–∑",
      "üìã –°–æ–≤–µ—Ç—ã –ø–æ —É–ø–∞–∫–æ–≤–∫–µ",
      "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
    ];
    
    const replyMarkup = {
      keyboard: suggestions.map(s => [{ text: s }]),
      resize_keyboard: true,
      one_time_keyboard: true
    };
    
    await sendTelegramMessage(
      chatId,
      "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
      replyMarkup
    );
    
  } catch (error) {
    console.error(`Error processing image: ${error}`);
    await sendTelegramMessage(
      chatId,
      "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
    );
  }
}

// Handle special button responses
async function handleSpecialResponse(message: any) {
  const text = message.text;
  const chatId = message.chat.id;
  
  if (text === "üì∏ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –≥—Ä—É–∑") {
    await sendTelegramMessage(chatId, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.");
  } else if (text === "üìã –°–æ–≤–µ—Ç—ã –ø–æ —É–ø–∞–∫–æ–≤–∫–µ") {
    const packingTips = `üìã <b>–°–æ–≤–µ—Ç—ã –ø–æ —É–ø–∞–∫–æ–≤–∫–µ –≥—Ä—É–∑–∞:</b>

1. <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–∞—Ä—É</b>
   ‚Ä¢ –ö–∞—Ä—Ç–æ–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏ –¥–ª—è –ª–µ–≥–∫–∏—Ö –≥—Ä—É–∑–æ–≤
   ‚Ä¢ –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —è—â–∏–∫–∏ –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
   ‚Ä¢ –ü–∞–ª–ª–µ—Ç—ã –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤

2. <b>–ó–∞—â–∏—Ç–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</b>
   ‚Ä¢ –í–æ–∑–¥—É—à–Ω–æ-–ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è –ø–ª–µ–Ω–∫–∞ –¥–ª—è —Ö—Ä—É–ø–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
   ‚Ä¢ –ü–µ–Ω–æ–ø–ª–∞—Å—Ç –∏–ª–∏ –ø–æ—Ä–æ–ª–æ–Ω –¥–ª—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏
   ‚Ä¢ –°—Ç—Ä–µ—Ç—á-–ø–ª–µ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏

3. <b>–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞</b>
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ "–•—Ä—É–ø–∫–æ–µ" –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   ‚Ä¢ –°—Ç—Ä–µ–ª–∫–∏ "–í–µ—Ä—Ö" –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
   ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è

4. <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–º–∞</b>
   ‚Ä¢ –†–∞–∑–±–µ—Ä–∏—Ç–µ –º–µ–±–µ–ª—å, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Å—Ç–æ—Ç—ã –º—è–≥–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
   ‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –º–µ–ª–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞!`;
    
    await sendTelegramMessage(chatId, packingTips);
  } else if (text === "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º") {
    await sendTelegramMessage(
      chatId,
      "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 123-45-67\nEmail: support@cargo-bot.ru\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00 –ú–°–ö"
    );
  }
}

// Process webhook message
async function processWebhookMessage(message: any) {
  console.log(`[processWebhookMessage] Processing message type: ${message.text ? 'text' : message.photo ? 'photo' : 'other'}`);
  
  // Handle commands
  if (message.text && message.text.startsWith("/")) {
    if (message.text === "/start") {
      await handleStartCommand(message);
    } else {
      await sendTelegramMessage(
        message.chat.id,
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
      );
    }
  } else if (message.text) {
    // Check if it's a special button response
    if (["üì∏ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –≥—Ä—É–∑", "üìã –°–æ–≤–µ—Ç—ã –ø–æ —É–ø–∞–∫–æ–≤–∫–µ", "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"].includes(message.text)) {
      await handleSpecialResponse(message);
    } else {
      await handleTextMessage(message);
    }
  } else if (message.photo) {
    await handleImageMessage(message);
  } else if (message.document && message.document.mime_type && message.document.mime_type.startsWith('image/')) {
    // Handle image documents
    const imageMessage = {
      ...message,
      photo: [{
        file_id: message.document.file_id,
        file_unique_id: message.document.file_unique_id,
        file_size: message.document.file_size
      }]
    };
    await handleImageMessage(imageMessage);
  } else {
    await sendTelegramMessage(
      message.chat.id,
      "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
    );
  }
}

// Set webhook function
async function setTelegramWebhook(): Promise<Response> {
  try {
    const botToken = Deno.env.get("CARGO_BOT_API_TOKEN");
    const functionSecret = Deno.env.get("FUNCTION_SECRET");
    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    
    if (!botToken || !functionSecret || !supabaseUrl) {
      return new Response(JSON.stringify({
        success: false,
        error: "Missing required environment variables"
      }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      });
    }
    
    // Extract project ref from Supabase URL
    const projectRef = supabaseUrl.match(/https:\/\/([^.]+)\.supabase\.co/)?.[1];
    if (!projectRef) {
      return new Response(JSON.stringify({
        success: false,
        error: "Could not extract project reference from SUPABASE_URL"
      }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      });
    }
    
    // Construct webhook URL
    const webhookUrl = `https://${projectRef}.supabase.co/functions/v1/cargo?secret=${functionSecret}`;
    
    // Set webhook via Telegram API
    const telegramApiUrl = `https://api.telegram.org/bot${botToken}/setWebhook`;
    const response = await fetch(telegramApiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ["message"],
        drop_pending_updates: true
      })
    });
    
    const result = await response.json();
    
    if (result.ok) {
      return new Response(JSON.stringify({
        success: true,
        message: "Webhook set successfully",
        webhook_url: webhookUrl,
        telegram_response: result
      }), {
        status: 200,
        headers: { "Content-Type": "application/json" }
      });
    } else {
      return new Response(JSON.stringify({
        success: false,
        error: "Failed to set webhook",
        telegram_response: result
      }), {
        status: 400,
        headers: { "Content-Type": "application/json" }
      });
    }
  } catch (error) {
    console.error(`Error setting webhook: ${error}`);
    return new Response(JSON.stringify({
      success: false,
      error: error.message
    }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
}

// Main handler
if (import.meta.main) {
  serve(async (req) => {
    console.log(`\n[WEBHOOK REQUEST] ${new Date().toISOString()}`);
    console.log(`[WEBHOOK] Method: ${req.method}, URL: ${req.url}`);
    
    try {
      const url = new URL(req.url);
      const pathname = url.pathname;
      
      // Handle set-webhook endpoint
      if (pathname.endsWith('/set-webhook') && (req.method === 'POST' || req.method === 'GET')) {
        console.log(`[WEBHOOK] Handling set-webhook endpoint`);
        const secret = url.searchParams.get("secret");
        const expectedSecret = Deno.env.get("FUNCTION_SECRET");
        if (secret !== expectedSecret) {
          return new Response("Unauthorized", { status: 401 });
        }
        return await setTelegramWebhook();
      }
      
      // Handle webhook endpoint
      if (req.method === 'POST' && pathname.endsWith('/cargo')) {
        console.log(`[WEBHOOK] Handling Telegram webhook endpoint`);
        
        // Verify secret
        const secret = url.searchParams.get("secret");
        const expectedSecret = Deno.env.get("FUNCTION_SECRET");
        
        if (secret !== expectedSecret) {
          console.error(`[WEBHOOK] Unauthorized request`);
          return new Response("Unauthorized", { status: 401 });
        }
        
        // Parse webhook data
        const update = await req.json();
        console.log(`[WEBHOOK] Update received:`, update);
        
        // Handle message
        const message = update.message;
        if (!message) {
          console.log(`[WEBHOOK] No message in update`);
          return new Response("OK", { status: 200 });
        }
        
        await processWebhookMessage(message);
        
        return new Response("OK", { status: 200 });
      }
      
      return new Response("Method not allowed", { status: 405 });
      
    } catch (error) {
      console.error(`[WEBHOOK ERROR]`, error);
      return new Response("Error processing request", { status: 500 });
    }
  });
}